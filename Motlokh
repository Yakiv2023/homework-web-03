import os
import shutil
import time
import multiprocessing

def factorize(number):
    factors = []

    for i in range(1, number + 1):
        if number % i == 0:
            factors.append(i)

    return factors

def sort_files_by_extension_sync(folder_path, destination_folder):
    if not os.path.exists(destination_folder):
        os.makedirs(destination_folder)

    extensions = {}

    for root, _, files in os.walk(folder_path):
        for file in files:
            file_path = os.path.join(root, file)
            _, ext = os.path.splitext(file)
            ext = ext[1:]  # Remove the dot from the extension
            extensions.setdefault(ext, []).append(file_path)

    for ext, files in extensions.items():
        ext_folder = os.path.join(destination_folder, ext)
        if not os.path.exists(ext_folder):
            os.makedirs(ext_folder)

        for file in files:
            shutil.move(file, ext_folder)

def sort_files_by_extension_async(folder_path, destination_folder):
    if not os.path.exists(destination_folder):
        os.makedirs(destination_folder)

    extensions = {}

    def process_file(file_path):
        _, ext = os.path.splitext(file_path)
        ext = ext[1:]  # Remove the dot from the extension
        extensions.setdefault(ext, []).append(file_path)

    def move_files(ext, files):
        ext_folder = os.path.join(destination_folder, ext)
        if not os.path.exists(ext_folder):
            os.makedirs(ext_folder)

        for file in files:
            shutil.move(file, ext_folder)

    pool = multiprocessing.Pool(processes=multiprocessing.cpu_count())

    for root, _, files in os.walk(folder_path):
        file_paths = [os.path.join(root, file) for file in files]
        pool.map(process_file, file_paths)

    pool.starmap(move_files, extensions.items())
    pool.close()
    pool.join()

if __name__ == "__main__":
    start_time_sync = time.time()
    sort_files_by_extension_sync("Мотлох", "Sorted_Motlokh_Sync")
    end_time_sync = time.time()

    start_time_async = time.time()
    sort_files_by_extension_async("Мотлох", "Sorted_Motlokh_Async")
    end_time_async = time.time()

    print("Synchronous version took {:.2f} seconds".format(end_time_sync - start_time_sync))
    print("Asynchronous version took {:.2f} seconds".format(end_time_async - start_time_async))

    a, b, c, d = factorize(128), factorize(255), factorize(99999), factorize(10651060)

    assert a == [1, 2, 4, 8, 16, 32, 64, 128]
    assert b == [1, 3, 5, 15, 17, 51, 85, 255]
    assert c == [1, 3, 9, 41, 123, 271, 369, 813, 2439, 11111, 33333, 99999]
    assert d == [1, 2, 4, 5, 7, 10, 14, 20, 28, 35, 70, 140, 76079, 152158, 304316, 380395, 532553, 760790, 1065106, 1521580, 2130212, 2662765, 5325530, 10651060]

    print("Тест виконано успішно.")
