from concurrent.futures import ThreadPoolExecutor
import time

def factorize(number):
    factors = []

    for i in range(1, number + 1):
        if number % i == 0:
            factors.append(i)

    return factors

def parallel_factorize(*numbers):
    with ThreadPoolExecutor() as executor:
        results = list(executor.map(factorize, numbers))
    return results

def test_parallel_factorize():
    a, b, c, d = parallel_factorize(128, 255, 99999, 10651060)

    assert a == [1, 2, 4, 8, 16, 32, 64, 128]
    assert b == [1, 3, 5, 15, 17, 51, 85, 255]
    assert c == [1, 3, 9, 41, 123, 271, 369, 813, 2439, 11111, 33333, 99999]
    assert d == [1, 2, 4, 5, 7, 10, 14, 20, 28, 35, 70, 140, 76079, 152158, 304316, 380395, 532553, 760790, 1065106, 1521580, 2130212, 2662765, 5325530, 10651060]

    print("Тест виконано успішно.")

if __name__ == "__main__":
    numbers = (128, 255, 99999, 10651060)

    start_time_sync = time.time()
    results_sync = list(map(factorize, numbers))
    end_time_sync = time.time()

    start_time_parallel = time.time()
    results_parallel = parallel_factorize(*numbers)
    end_time_parallel = time.time()

    print("Synchronous version results:", results_sync)
    print("Synchronous version took {:.2f} seconds".format(end_time_sync - start_time_sync))
    print("Parallel version results:", results_parallel)
    print("Parallel version took {:.2f} seconds".format(end_time_parallel - start_time_parallel))

    test_parallel_factorize()
